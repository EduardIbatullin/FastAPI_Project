"""
Интеграционный тест для API бронирований комнат.
Проверяет:
- Успешное создание бронирований до максимального лимита (например, 10 бронирований для одной комнаты)
- Корректную обработку ошибки переполнения (409 Conflict), если лимит превышен
- Корректность выдачи общего количества бронирований после каждой операции

Примечания:
- Для теста используется room_id=4 (он должен быть в мок-датасете и иметь лимит 10 одновременных броней)
- Все даты и id согласованы с содержимым mock-датасета (см. app/tests/mock_rooms.json и mock_bookings.json)
"""

import pytest
from httpx import AsyncClient

@pytest.mark.parametrize(
    "room_id, date_from, date_to, booked_rooms, status_code",
    [
        # room_id=4 — в тестовой базе доступно максимум 10 броней на указанные даты
        (4, "2030-05-01", "2030-05-15", 3, 200),   # 3-я бронь — успешная
        (4, "2030-05-01", "2030-05-15", 4, 200),   # 4-я бронь — успешная
        (4, "2030-05-01", "2030-05-15", 5, 200),   # 5-я бронь — успешная
        (4, "2030-05-01", "2030-05-15", 6, 200),   # 6-я бронь — успешная
        (4, "2030-05-01", "2030-05-15", 7, 200),   # 7-я бронь — успешная
        (4, "2030-05-01", "2030-05-15", 8, 200),   # 8-я бронь — успешная
        (4, "2030-05-01", "2030-05-15", 9, 200),   # 9-я бронь — успешная
        (4, "2030-05-01", "2030-05-15", 10, 200),  # 10-я бронь — лимит, успешная
        # Попытка превысить лимит бронирований
        (4, "2030-05-01", "2030-05-15", 10, 409),  # 11-я попытка — ошибка
        (4, "2030-05-01", "2030-05-15", 10, 409),  # 12-я попытка — ошибка
    ]
)
async def test_add_and_get_booking(
    room_id: int,
    date_from: str,
    date_to: str,
    booked_rooms: int,
    status_code: int,
    authenticated_ac: AsyncClient,
):
    """
    Делает POST-запрос на создание бронирования.
    Затем через GET /bookings проверяет общее количество бронирований пользователя.
    Ожидает:
    - Статус 200: при успешном бронировании (до лимита)
    - Статус 409: если лимит комнат превышен (ошибка Conflict)
    - Количество броней соответствует ожидаемому после каждого запроса
    """
    # Попытка создать бронь
    response = await authenticated_ac.post("/bookings", json={
        "room_id": room_id,
        "date_from": date_from,
        "date_to": date_to,
    })
    assert response.status_code == status_code

    # После неудачной попытки (409) не должно увеличиться число броней
    response = await authenticated_ac.get("/bookings")
    assert len(response.json()) == booked_rooms
